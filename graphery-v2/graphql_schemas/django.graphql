# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CodeType {
    code: String!
    createdTime: DateTime!
    executionResult(graphAnchorId: UUID!): ExecutionResultType
    executionResults: [ExecutionResultType!]!
    id: UUID!
    modifiedTime: DateTime!
    name: String!
    tutorialAnchor: TutorialAnchorType!
}

type ErrorType {
    message: String!
    traceback: String!
}

type ExecutionResultType {
    code: CodeType!
    createdTime: DateTime!
    graphAnchor: GraphAnchorType!
    id: UUID!
    modifiedTime: DateTime!
    resultJson: JSONType!
    resultJsonMeta: JSONType!
}

type GraphAnchorType {
    anchorName: String!
    createdTime: DateTime!
    defaultOrder: Int!
    executionResult(codeId: UUID!): ExecutionResultType
    executionResults: [ExecutionResultType!]!
    graph: GraphType
    graphDescription(lang: LangCode! = EN): GraphDescriptionType
    graphDescriptions: [GraphDescriptionType!]!
    id: UUID!
    itemStatus: Status!
    modifiedTime: DateTime!
    tags: [TagAnchorType!]!
    tutorialAnchors: [OrderedGraphAnchorType!]!
    uploads: [UploadsType!]!
    url: String!
}

type GraphDescriptionType {
    authors: [UserType!]!
    createdTime: DateTime!
    descriptionMarkdown: String!
    graphAnchor: GraphAnchorType!
    id: UUID!
    itemStatus: Status!
    langCode: String!
    modifiedTime: DateTime!
    title: String!
}

type GraphType {
    createdTime: DateTime!
    graphAnchor: GraphAnchorType!
    graphJson: JSONType!
    id: UUID!
    itemStatus: Status!
    makers: [UserType!]!
    modifiedTime: DateTime!
}

type InfoType {
    result: JSONType!
}

type Mutation {
    executionRequest(request: RequestType!): ResponseType!
    login(password: String!, username: String!): UserType
    logout: Boolean!
    mutateCode(data: CodeMutationType!, op: OperationType!): CodeType!
    mutateGraph(data: GraphMutationType!, op: OperationType!): GraphType!
    mutateGraphAnchor(data: GraphAnchorMutationType!, op: OperationType!): GraphAnchorType!
    mutateGraphDescription(data: GraphDescriptionMutationType!, op: OperationType!): GraphDescriptionType!
    mutateTag(data: TagMutationType!, op: OperationType!): TagType
    mutateTagAnchor(data: TagAnchorMutationType!, op: OperationType!): TagAnchorType
    mutateTutorial(data: TutorialMutationType!, op: OperationType!): TutorialType!
    mutateTutorialAnchor(data: TutorialAnchorMutationType!, op: OperationType!): TutorialAnchorType!
    register(data: UserMutationType!, recaptchaToken: String): UserType
}

type OrderedGraphAnchorType {
    createdTime: DateTime!
    graphAnchor: GraphAnchorType!
    id: UUID!
    modifiedTime: DateTime!
    order: Int!
    tutorialAnchor: TutorialAnchorType!
}

type Query {
    code(codeId: UUID!): CodeType
    graph(anchorId: UUID!): GraphType
    graphAnchors(filters: GraphAnchorFilter): [GraphAnchorType!]!
    graphContent(anchorId: UUID, lang: LangCode! = EN, url: String): GraphDescriptionType
    me: UserType
    tagAnchors(filters: TagAnchorFilter): [TagAnchorType!]!
    tutorialAnchors(filters: TutorialAnchorFilter): [TutorialAnchorType!]!
    tutorialContent(lang: LangCode! = EN, url: String!): TutorialType
}

type ResponseType {
    errors: [ErrorType!]
    info: InfoType
}

type TagAnchorType {
    anchorName: String!
    createdTime: DateTime!
    graphAnchors: [GraphAnchorType!]!
    id: UUID!
    itemStatus: Status!
    modifiedTime: DateTime!
    tags: [TagType!]!
    tutorialAnchors: [TutorialAnchorType!]!
}

type TagType {
    createdTime: DateTime!
    description: String!
    id: UUID!
    itemStatus: Status!
    langCode: String!
    modifiedTime: DateTime!
    name: String!
    tagAnchor: TagAnchorType!
}

type TutorialAnchorType {
    anchorName: String!
    code: CodeType
    createdTime: DateTime!
    graphAnchors: [GraphAnchorType!]!
    id: UUID!
    itemStatus: Status!
    modifiedTime: DateTime!
    rank: String!
    tagAnchors: [TagAnchorType!]!
    tutorials: [TutorialType!]!
    uploads: [UploadsType!]!
    url: String!
}

type TutorialType {
    abstract: String!
    authors: [UserType!]!
    contentMarkdown: String!
    createdTime: DateTime!
    id: UUID!
    itemStatus: Status!
    langCode: String!
    modifiedTime: DateTime!
    title: String!
    tutorialAnchor: TutorialAnchorType!
}

type UploadsType {
    createdTime: DateTime!
    graphAnchors: [GraphAnchorType!]!
    id: UUID!
    modifiedTime: DateTime!
    name: String!
    tutorialAnchors: [TutorialAnchorType!]!
}

type UserType {
    createdTime: DateTime!
    displayedName: String!
    email: String!
    graphDescriptions: [GraphDescriptionType!]!
    graphs: [GraphAnchorType!]!
    id: UUID!
    isStaff: Boolean!
    modifiedTime: DateTime!
    role: Int!
    tutorials: [TutorialAnchorType!]!
    username: String!
}

enum LangCode {
    AF
    AR
    AR_DZ
    AST
    AZ
    BE
    BG
    BN
    BR
    BS
    CA
    CS
    CY
    DA
    DE
    DSB
    EL
    EN
    EN_AU
    EN_GB
    EO
    ES
    ES_AR
    ES_CO
    ES_MX
    ES_NI
    ES_VE
    ET
    EU
    FA
    FI
    FR
    FY
    GA
    GD
    GL
    HE
    HI
    HR
    HSB
    HU
    HY
    IA
    ID
    IG
    IO
    IS
    IT
    JA
    KA
    KAB
    KK
    KM
    KN
    KO
    KY
    LB
    LT
    LV
    MK
    ML
    MN
    MR
    MY
    NB
    NE
    NL
    NN
    OS
    PA
    PL
    PT
    PT_BR
    RO
    RU
    SK
    SL
    SQ
    SR
    SR_LATN
    SV
    SW
    TA
    TE
    TG
    TH
    TK
    TR
    TT
    UDM
    UK
    UR
    UZ
    VI
    ZH_HANS
    ZH_HANT
}

enum OperationType {
    CREATE
    DELETE
    UPDATE
}

enum Status {
    AUTOSAVE
    CLOSED
    DRAFT
    PRIVATE
    PUBLISHED
    REVIEWING
    TRASH
}

"Date with time (isoformat)"
scalar DateTime

"A JSON object or string"
scalar JSONType

scalar UUID

input CodeMutationType {
    code: String
    id: UUID
    name: String
    tutorialAnchor: TutorialAnchorMutationType
}

input DatetimeFilterLookup {
    contains: DateTime
    endsWith: DateTime
    exact: DateTime
    gt: DateTime
    gte: DateTime
    iContains: DateTime
    iEndsWith: DateTime
    iExact: DateTime
    iRegex: String
    iStartsWith: DateTime
    inList: [DateTime!]
    isNull: Boolean
    lt: DateTime
    lte: DateTime
    range: [DateTime!]
    regex: String
    startsWith: DateTime
}

input DjangoModelFilterInput {
    pk: ID!
}

input GraphAnchorFilter {
    anchorName: StrFilterLookup
    createdTime: DatetimeFilterLookup
    id: UUIDFilterLookup
    itemStatus: Status
    modifiedTime: DatetimeFilterLookup
    url: StrFilterLookup
}

input GraphAnchorMutationType {
    anchorName: String
    defaultOrder: Int
    id: UUID
    itemStatus: Status
    tagAnchors: [TagAnchorMutationType]
    tutorialAnchors: [OrderedTutorialAnchorBindingType]
    url: String
}

input GraphDescriptionMutationType {
    authors: [UserMutationType]
    descriptionMarkdown: String
    graphAnchor: GraphAnchorMutationType
    id: UUID
    itemStatus: Status
    langCode: String
    title: String
}

input GraphMutationType {
    graphAnchor: GraphAnchorMutationType
    graphJson: String
    id: UUID
    itemStatus: Status
    makers: [UserMutationType]
}

input OrderedGraphAnchorBindingType {
    graphAnchor: GraphAnchorMutationType!
    order: Int
}

input OrderedTutorialAnchorBindingType {
    order: Int
    tutorialAnchor: TutorialAnchorMutationType!
}

input RequestOptionType {
    floatPrecision: Int
    inputList: [String!]
    randSeed: Int
}

input RequestType {
    code: String!
    graph: String!
    options: RequestOptionType
    version: String!
}

input StrFilterLookup {
    contains: String
    endsWith: String
    exact: String
    gt: String
    gte: String
    iContains: String
    iEndsWith: String
    iExact: String
    iRegex: String
    iStartsWith: String
    inList: [String!]
    isNull: Boolean
    lt: String
    lte: String
    range: [String!]
    regex: String
    startsWith: String
}

input TagAnchorFilter {
    anchorName: StrFilterLookup
    createdTime: DatetimeFilterLookup
    id: UUIDFilterLookup
    itemStatus: Status
    modifiedTime: DatetimeFilterLookup
    tags: DjangoModelFilterInput
}

input TagAnchorMutationType {
    anchorName: String
    id: UUID
    itemStatus: Status
}

input TagMutationType {
    description: String
    id: UUID
    itemStatus: Status
    langCode: String
    name: String
    tagAnchor: TagAnchorMutationType
}

input TutorialAnchorFilter {
    anchorName: StrFilterLookup
    createdTime: DatetimeFilterLookup
    id: UUIDFilterLookup
    itemStatus: Status
    modifiedTime: DatetimeFilterLookup
    rank: StrFilterLookup
    tutorials: TutorialFilter
    url: StrFilterLookup
}

input TutorialAnchorMutationType {
    anchorName: String
    graphAnchors: [OrderedGraphAnchorBindingType]
    id: UUID
    itemStatus: Status
    tagAnchors: [TagAnchorMutationType]
    url: String
}

input TutorialFilter {
    abstract: StrFilterLookup
    authors: UserFilter
    contentMarkdown: StrFilterLookup
    createdTime: DatetimeFilterLookup
    id: UUIDFilterLookup
    itemStatus: Status
    langCode: StrFilterLookup
    modifiedTime: DatetimeFilterLookup
    title: StrFilterLookup
    tutorialAnchor: TutorialAnchorFilter
}

input TutorialMutationType {
    abstract: String
    authors: [UserMutationType]
    contentMarkdown: String
    id: UUID
    itemStatus: Status
    langCode: String
    title: String
    tutorialAnchor: TutorialAnchorMutationType
}

input UUIDFilterLookup {
    contains: UUID
    endsWith: UUID
    exact: UUID
    gt: UUID
    gte: UUID
    iContains: UUID
    iEndsWith: UUID
    iExact: UUID
    iRegex: String
    iStartsWith: UUID
    inList: [UUID!]
    isNull: Boolean
    lt: UUID
    lte: UUID
    range: [UUID!]
    regex: String
    startsWith: UUID
}

input UserFilter {
    displayedName: StrFilterLookup
}

input UserMutationType {
    displayedName: String
    email: String
    id: UUID
    inMailingList: Boolean
    newPassword: String
    password: String
    username: String
}
